#!/usr/bin/env ruby
#
#   bin/porolog   - Executable
#
#     Luis Esteban  19 April 2019
#       created
#     Luis Esteban  2 August 2020
#       added builtin predicates
#

require 'porolog'

include Porolog

puts '-- Sample Porolog Program --'


# -- Predicate Facts and Rules --
builtin   :gtr, :is, :noteq, :between
predicate :prime, :search_prime

prime(2).fact!
prime(3).fact!
prime(:X) << [
  between(:X, 4, 20000),
  is(:X_mod_2, :X) {|x| x % 2 },
  noteq(:X_mod_2, 0),
  :CUT,
  search_prime(:X, 3),
]

search_prime(:X, :N) << [
  is(:N_squared, :N) {|n| n ** 2 },
  gtr(:N_squared, :X),
  :CUT
]

search_prime(:X, :N) << [
  is(:X_mod_N, :X, :N) {|x,n| x % n },
  noteq(:X_mod_N, 0),
  is(:M, :N) {|n| n + 2 },
  :CUT,
  search_prime(:X, :M),
]


# -- Validation Queries --
(0..23).each do |i|
  query = prime(i)

  if query.valid?
    puts "#{query.inspect} is valid"
  else
    puts "#{query.inspect} is not valid"
  end
end


# -- Solution Queries --
query = prime(:X)

solutions = query.solve(50)
puts solutions.inspect

solutions_for_x = query.solve_for(:X)
solutions_for_x.each do |x|
  puts "#{x.inspect} is prime"
end
